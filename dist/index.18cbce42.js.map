{"mappings":"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","sources":["js/last.js"],"sourcesContent":["// import html2canvas from 'html2canvas';\r\n\r\nfunction initCardGenerator() {\r\n    try {\r\n        const savedState = JSON.parse(localStorage.getItem('cardState'));\r\n        if (!savedState) return;\r\n\r\n        const card = document.querySelector('.card');\r\n        const cardVisual = document.querySelector('.card-visual');\r\n        const txtBox = document.querySelector('.txt-box');\r\n\r\n        // background 복원\r\n        if (savedState.background) {\r\n            card.style.background = savedState.background;\r\n        }\r\n\r\n        // 텍스트 내용 복원\r\n        if (savedState.text && txtBox) {\r\n            txtBox.textContent = savedState.text;\r\n        }\r\n\r\n        // composition 내용 복원\r\n        if (savedState.composition && cardVisual) {\r\n            savedState.composition.forEach(container => {\r\n                const draggableContainer = document.createElement('div');\r\n                draggableContainer.className = 'draggable-container';\r\n                draggableContainer.style.position = 'absolute';\r\n                draggableContainer.style.left = container.position.left;\r\n                draggableContainer.style.top = container.position.top;\r\n                draggableContainer.style.border = container.style.border;\r\n\r\n                const img = document.createElement('img');\r\n                img.src = container.image.src;\r\n                img.alt = container.image.alt;\r\n                img.style.width = container.image.width;\r\n                img.style.height = container.image.height;\r\n\r\n                draggableContainer.appendChild(img);\r\n                cardVisual.appendChild(draggableContainer);\r\n            });\r\n        }\r\n\r\n        // 상태 정리\r\n        localStorage.removeItem('cardState');\r\n\r\n        // 모든 이미지가 로드된 후에 이벤트 리스너 추가\r\n        waitForImages(card).then(() => {\r\n            card.addEventListener('touchstart', handleLongPress);\r\n            card.addEventListener('mousedown', handleLongPress);\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('카드 상태 복원 중 오류:', error);\r\n    }\r\n}\r\n\r\n// 모든 이미지 로드 대기\r\nfunction waitForImages(element) {\r\n    const images = element.getElementsByTagName('img');\r\n    const promises = Array.from(images).map(img => {\r\n        return new Promise((resolve) => {\r\n            if (img.complete) {\r\n                resolve();\r\n            } else {\r\n                img.onload = () => resolve();\r\n                img.onerror = () => resolve();\r\n            }\r\n        });\r\n    });\r\n    return Promise.all(promises);\r\n}\r\n\r\n// 길게 누르기 이벤트 핸들러\r\nfunction handleLongPress(event) {\r\n    let timer;\r\n    const card = event.currentTarget;\r\n\r\n    const start = () => {\r\n        timer = setTimeout(() => {\r\n            convertToImage(card);\r\n        }, 1000);\r\n    };\r\n\r\n    const end = () => {\r\n        clearTimeout(timer);\r\n    };\r\n\r\n    // 터치 이벤트\r\n    if (event.type === 'touchstart') {\r\n        start();\r\n        card.addEventListener('touchend', end, { once: true });\r\n        card.addEventListener('touchmove', end, { once: true });\r\n    }\r\n    // 마우스 이벤트\r\n    else if (event.type === 'mousedown') {\r\n        start();\r\n        card.addEventListener('mouseup', end, { once: true });\r\n        card.addEventListener('mousemove', end, { once: true });\r\n    }\r\n}\r\n\r\n// 카드를 이미지로 변환하고 다운로드\r\nasync function convertToImage(card) {\r\n    try {\r\n        const canvas = await html2canvas(card, {\r\n            backgroundColor: null,\r\n            scale: 2,\r\n            useCORS: true,\r\n            allowTaint: true,\r\n            logging: true,\r\n            width: card.offsetWidth,\r\n            height: card.offsetHeight\r\n        });\r\n\r\n        // canvas를 이미지로 변환\r\n        const imageDataUrl = canvas.toDataURL('image/png');\r\n\r\n        // 다운로드\r\n        const link = document.createElement('a');\r\n        link.href = imageDataUrl;\r\n        link.download = `card-${Date.now()}.png`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n\r\n    } catch (error) {\r\n        console.error('이미지 변환 중 오류:', error);\r\n    }\r\n}\r\n\r\nwindow.initCardGenerator = initCardGenerator;"],"names":[],"version":3,"file":"index.18cbce42.js.map","sourceRoot":"/__parcel_source_root/"}